{"ast":null,"code":"var _jsxFileName = \"/Users/Ethan/Documents/GitHub/Team-Reactor/src/DailyRec.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport FirebaseContext from './Firebase';\nimport { Card, ListGroup, ListGroupItem } from 'react-bootstrap';\nconst API_KEY = \"7d667341\";\n\nfunction DailyRec(props) {\n  let [movieData, setMovieData] = useState({});\n  console.log(props);\n  useEffect(() => {\n    async function matching() {\n      let match = false;\n      console.log(\"enter while loop\");\n\n      while (true) {\n        let randMovieID = '';\n        let i = 0;\n\n        for (i = 0; i < 7; i++) {\n          randMovieID += Math.round(Math.random() * 10).toString();\n        }\n\n        let url = \"http://www.omdbapi.com/?i=tt\" + randMovieID + \"&apikey=\" + API_KEY;\n        let response = await fetch(url);\n        let data = await response.json();\n        console.log(data); // setMovieData(\n        //     dataSet = data.Response !== \"False\" && data.Genre.includes(userGenre) && data\n        //     )\n\n        if (data.Response !== \"False\" && data.Genre.includes(props.userGenre) && data.Type === \"movie\") {\n          setMovieData(data);\n          break;\n        } // .then(response =>\n        //     response.json())\n        // .then(data => {setMovieData({\n        //     movieData: data.Response && data.genre.includes(userGenre) && data\n        //     })})\n\n\n        console.log(\"finish one loop\");\n      }\n    }\n\n    matching();\n  }, []); // part that got replaced\n  // <div>\n  //     <h1>{movieData == undefined ? \"Loading today's recommendation\" : ''}</h1>\n  //     <img src = {movieData.Poster} ></img>\n  //     <h1>{movieData.Title}</h1>\n  //     <h3>{\"Length: \" + movieData.Length}</h3>\n  //     <h3>{\"Director: \" +movieData.Director}</h3>\n  //     <p>{\"Plot: \" +movieData.Plot}</p>\n  // </div>\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Get a \"), /*#__PURE__*/React.createElement(Card, {\n    style: {\n      width: '25rem'\n    },\n    className: \"center-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Img, {\n    variant: \"top\",\n    src: movieData.Poster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }\n  }, movieData.Title), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }, \"Length: \" + movieData.Length)), /*#__PURE__*/React.createElement(ListGroup, {\n    className: \"list-group-flush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListGroupItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, \"Director: \" + movieData.Director), /*#__PURE__*/React.createElement(ListGroupItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"Plot: \" + movieData.Plot))), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Get a rec!\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default DailyRec;","map":{"version":3,"sources":["/Users/Ethan/Documents/GitHub/Team-Reactor/src/DailyRec.js"],"names":["React","useState","useEffect","useContext","FirebaseContext","Card","ListGroup","ListGroupItem","API_KEY","DailyRec","props","movieData","setMovieData","console","log","matching","match","randMovieID","i","Math","round","random","toString","url","response","fetch","data","json","Response","Genre","includes","userGenre","Type","width","Poster","Title","Length","Director","Plot"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport FirebaseContext from './Firebase'\nimport { Card,ListGroup,ListGroupItem } from 'react-bootstrap'\n\nconst API_KEY = \"7d667341\"\n\nfunction DailyRec(props) {\n    let [movieData, setMovieData] = useState({\n\n    })\n    console.log(props)\n    useEffect(() => {\n        async function matching() {\n            let match = false\n            console.log(\"enter while loop\")\n            while(true) {\n                let randMovieID = ''\n                let i = 0\n                for(i = 0; i < 7; i++) {\n                    randMovieID += Math.round(Math.random() * 10).toString()\n                }\n                let url = \"http://www.omdbapi.com/?i=tt\" + randMovieID + \"&apikey=\" + API_KEY\n                let response = await fetch(url)\n                let data = await response.json()\n                console.log(data)\n                // setMovieData(\n                //     dataSet = data.Response !== \"False\" && data.Genre.includes(userGenre) && data\n                //     )\n\n                if(data.Response !== \"False\" && data.Genre.includes(props.userGenre) && data.Type === \"movie\") {\n                    setMovieData(\n                        data\n                    )\n                    break\n                }\n                    // .then(response =>\n                    //     response.json())\n                    // .then(data => {setMovieData({\n                    //     movieData: data.Response && data.genre.includes(userGenre) && data\n                    //     })})\n                console.log(\"finish one loop\")\n            }\n        }\n        matching()\n    }, [])\n    // part that got replaced\n    // <div>\n    //     <h1>{movieData == undefined ? \"Loading today's recommendation\" : ''}</h1>\n    //     <img src = {movieData.Poster} ></img>\n    //     <h1>{movieData.Title}</h1>\n    //     <h3>{\"Length: \" + movieData.Length}</h3>\n    //     <h3>{\"Director: \" +movieData.Director}</h3>\n    //     <p>{\"Plot: \" +movieData.Plot}</p>\n    // </div>\n\n    return (\n        <div>\n          {/* <h1>{movieData == undefined ? \"Loading today's recommendation\" : ''}</h1> */}\n          <h2>Get a </h2>\n          <Card style={{ width: '25rem' }}  className=\"center-item\">\n\n            <Card.Img variant=\"top\" src={movieData.Poster} />\n\n            <Card.Body>\n                  <Card.Title>{movieData.Title}</Card.Title>\n                  <Card.Text>\n                    {\"Length: \" + movieData.Length}\n                  </Card.Text>\n            </Card.Body>\n            \n            <ListGroup className=\"list-group-flush\">\n              <ListGroupItem>{\"Director: \" +movieData.Director}</ListGroupItem>\n              <ListGroupItem>{\"Plot: \" +movieData.Plot}</ListGroupItem>\n            </ListGroup>\n          </Card>\n\n            <Button>Get a rec!</Button>\n            <label></label>\n        </div>\n    )\n}\n\nexport default DailyRec\n"]},"metadata":{},"sourceType":"module"}