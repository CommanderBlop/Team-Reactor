{"ast":null,"code":"var _jsxFileName = \"/Users/Ethan/Documents/GitHub/Team-Reactor/src/Authentication/Register.js\";\nimport React, { useContext } from \"react\";\nimport './login.css';\nimport FirebaseContext from '../Firebase';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\n\nfunction Register(props) {\n  const firebase = useContext(FirebaseContext);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"register-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      try {\n        //Wait to do anything until account is made\n        const res = await firebase.auth.createUserWithEmailAndPassword(values.email, values.pwd); //make changes to user before saving, wait until changes made\n\n        await res.user.updateProfile({\n          displayName: values.name\n        });\n        const user = res.user; // write in database\n\n        firebase.db.collection(\"students\").doc(user.uid).set({\n          school: values.school,\n          classYear: values.classYear,\n          displayName: values.name,\n          lastUploadTime: null,\n          defResumeName: ''\n        });\n        user.sendEmailVerification();\n        history.push(\"/verifyEmail\");\n      } catch (err) {\n        //Catch all errors here!\n        setErrorText(err.message);\n        setSubmitting(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"register-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    as: \"input\",\n    type: \"text\",\n    placeholder: \"name\",\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    as: \"input\",\n    type: \"email\",\n    placeholder: \"email\",\n    name: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    as: \"input\",\n    type: \"password\",\n    placeholder: \"password\",\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Already registered? \", /*#__PURE__*/React.createElement(Link, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 56\n    }\n  }, \"Sign In\"))))));\n}\n\nexport default Register;","map":{"version":3,"sources":["/Users/Ethan/Documents/GitHub/Team-Reactor/src/Authentication/Register.js"],"names":["React","useContext","FirebaseContext","Link","useHistory","Formik","Form","Field","Register","props","firebase","username","password","values","setSubmitting","res","auth","createUserWithEmailAndPassword","email","pwd","user","updateProfile","displayName","name","db","collection","doc","uid","set","school","classYear","lastUploadTime","defResumeName","sendEmailVerification","history","push","err","setErrorText","message"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport './login.css';\nimport FirebaseContext from '../Firebase'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Formik, Form, Field } from 'formik'\n\n\nfunction Register(props) {\n  const firebase = useContext(FirebaseContext)\n\n  return (\n\n    <div className=\"register-page\">\n      <div className=\"form\">\n\n        <Formik\n          initialValues={{ username: '', password: '' }}\n          onSubmit={async (values, { setSubmitting }) => {\n            try {\n\n              //Wait to do anything until account is made\n              const res = await firebase.auth.createUserWithEmailAndPassword(values.email, values.pwd)\n  \n              //make changes to user before saving, wait until changes made\n              await res.user.updateProfile({ displayName: values.name })\n  \n              const user = res.user\n  \n              // write in database\n              firebase.db.collection(\"students\").doc(user.uid).set({\n                  school: values.school,\n                  classYear: values.classYear,\n                  displayName: values.name,\n                  lastUploadTime: null,\n                  defResumeName: ''\n              })\n  \n              user.sendEmailVerification()\n              history.push(\"/verifyEmail\")\n  \n          } catch (err) {\n              //Catch all errors here!\n              setErrorText(err.message);\n              setSubmitting(false)\n          }\n          }}\n        >\n          <Form className=\"register-form\">\n            <Field as=\"input\" type=\"text\" placeholder=\"name\" name=\"name\" />\n            <Field as=\"input\" type=\"email\" placeholder=\"email\" name=\"email\" />\n            <Field as=\"input\" type=\"password\" placeholder=\"password\" name=\"password\" />\n            <button type=\"submit\">Sign Up</button>\n            <p className=\"message\">Already registered? <Link to=\"/login\">Sign In</Link></p>\n          </Form>\n        </Formik>\n\n\n      </div>\n    </div>\n\n  );\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}