{"ast":null,"code":"var _jsxFileName = \"/Users/Ethan/Documents/GitHub/Team-Reactor/src/Genre.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from './Firebase';\nimport AuthContext from './Firebase/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { Card } from 'react-bootstrap';\n\nfunction Genre() {\n  const firebase = useContext(FirebaseContext);\n  const [user, setUser] = useState();\n  const [genres, setGenres] = useState([]);\n  const [loading, setLoading] = useState(true);\n  firebase.auth.onAuthStateChanged(user => {\n    if (user) {\n      setUser(user);\n    } else {\n      setUser(null);\n    }\n  });\n  useEffect(() => {\n    if (user) {\n      let friendList;\n      let friendsBuilder = [];\n      let count = 0;\n      firebase.db.collection('user').doc(user.uid).get().then(function (doc) {\n        friendList = doc.data().friends;\n      }).then(function () {\n        friendList.forEach((friend, index) => {\n          firebase.db.collection('user').doc(friend).get().then(function (doc) {\n            friendsBuilder.push(doc.data());\n            count++;\n\n            if (count === friendList.length) {\n              setLoading(false);\n            }\n          });\n        }); // setFriends(friendsBuilder)\n      });\n    }\n  }, [user]);\n  let genreList = ['Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film Noir', 'Game Show', 'History', 'Horror', 'Musical', 'Music', 'Mystery', 'News', 'Reality TV', 'Romance', 'Sci Fi', 'Short', 'Sport', 'Talk Show', 'Thriller', 'War', 'Western'];\n  let checkingField = genreList.map(genre => {\n    return /*#__PURE__*/React.createElement(Form.Check, {\n      type: 'checkbox',\n      id: genre,\n      label: genre,\n      checked: genres.includes(genre),\n      onChange: genres.includes(genre) ? () => {\n        setGenres(genres.filter(filter => filter !== genre));\n      } : () => {\n        setGenres(genres.concat(genre));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n    id: \"genre\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, checkingField));\n}\n\nexport default Genre;","map":{"version":3,"sources":["/Users/Ethan/Documents/GitHub/Team-Reactor/src/Genre.js"],"names":["React","useContext","useState","useEffect","FirebaseContext","AuthContext","Link","useHistory","Formik","Form","Field","Card","Genre","firebase","user","setUser","genres","setGenres","loading","setLoading","auth","onAuthStateChanged","friendList","friendsBuilder","count","db","collection","doc","uid","get","then","data","friends","forEach","friend","index","push","length","genreList","checkingField","map","genre","includes","filter","concat"],"mappings":"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","sourcesContent":["\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from './Firebase'\nimport AuthContext from './Firebase/AuthContext'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Formik, Form, Field } from 'formik'\nimport { Card } from 'react-bootstrap'\n\nfunction Genre() {\n    const firebase = useContext(FirebaseContext)\n    const [user, setUser] = useState()\n    const [genres, setGenres] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    firebase.auth.onAuthStateChanged(user => {\n        if (user) {\n            setUser(user);\n        } else {\n            setUser(null)\n        }\n    });\n\n    useEffect(() => {\n        if (user) {\n            let friendList\n            let friendsBuilder = []\n            let count = 0\n            firebase.db.collection('user').doc(user.uid).get().then(function (doc) {\n                friendList = doc.data().friends\n            }).then(function () {\n                friendList.forEach((friend, index) => {\n                    firebase.db.collection('user').doc(friend).get().then(function (doc) {\n                        friendsBuilder.push(doc.data())\n                        count++\n                        if (count === friendList.length) {\n                            setLoading(false)\n                        }\n                    })\n                })\n                // setFriends(friendsBuilder)\n            })\n        }\n    }, [user])\n\n    let genreList = ['Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film Noir', 'Game Show', 'History', 'Horror', 'Musical', 'Music', 'Mystery', 'News', 'Reality TV', 'Romance', 'Sci Fi', 'Short', 'Sport', 'Talk Show', 'Thriller', 'War', 'Western']\n    let checkingField = genreList.map(genre => {\n        return (\n            <Form.Check\n                type={'checkbox'}\n                id={genre}\n                label={genre}\n                checked={genres.includes(genre)}\n                onChange={genres.includes(genre) ? () => {\n                    setGenres(genres.filter(filter => filter !== genre))\n                } : () => {\n                    setGenres(genres.concat(genre))\n                }}\n            />\n        )\n    })\n\n\n    return (\n        <>\n            <Form id=\"genre\">\n                {checkingField}\n                {/* <Form.Check\n                    type={'checkbox'}\n                    id={'act ion'}\n                    label={'Action'}\n                    checked={genres.includes('action')}\n                    onChange={genres.includes('action') ? () => {\n                        setGenres(genres.filter(filter => filter !== 'action'))\n                    } : () => {\n                        setGenres(genres.concat('action'))\n                    }}\n                />\n                <Form.Check\n                    type={'checkbox'}\n                    id={'adult'}\n                    label={'Adult'}\n                    checked={genres.includes('adult')}\n                    onChange={genres.includes('adult') ? () => {\n                        setGenres(genres.filter(filter => filter !== 'adult'))\n                    } : () => {\n                        setGenres(genres.concat('adult'))\n                    }}\n                />\n                <Form.Check\n                    type={'checkbox'}\n                    id={'adventure '}\n                    label={'Adventure '}\n                    checked={genres.includes('adventure')}\n                    onChange={genres.includes('adventure') ? () => {\n                        setGenres(genres.filter(filter => filter !== 'adventure'))\n                    } : () => {\n                        setGenres(genres.concat('adventure'))\n                    }}\n                /> */}\n\n            </Form>\n\n        </>\n    )\n}\n\nexport default Genre"]},"metadata":{},"sourceType":"module"}