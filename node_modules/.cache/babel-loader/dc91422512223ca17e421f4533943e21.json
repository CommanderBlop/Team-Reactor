{"ast":null,"code":"var _jsxFileName = \"/Users/Ethan/Documents/GitHub/Team-Reactor/src/ShowPost/ShowPost.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from '../Firebase';\nimport AuthContext from '../Firebase/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { Card } from 'react-bootstrap';\nimport PostCard from './PostCard';\n\nfunction ShowPost() {\n  const firebase = useContext(FirebaseContext);\n  const [user, setUser] = useState();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  firebase.auth.onAuthStateChanged(user => {\n    if (user) {\n      setUser(user);\n    } else {\n      setUser(null);\n    }\n  });\n  useEffect(() => {\n    if (user) {\n      let posts;\n      let postsBuilder = [];\n      firebase.db.collection('post').get().then(function (querySnapshot) {\n        querySnapshot.forEach(post => {\n          let postHolder = post.data();\n          post.id = post.setPosts(postsBuilder.concat(post.data()));\n        });\n      }).then(function () {\n        setLoading(false);\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  }, [user]);\n  let localDisplay = 'loading...';\n\n  if (!loading) {\n    localDisplay = posts.map((post, index) => {\n      return /*#__PURE__*/React.createElement(PostCard, {\n        user: post.user,\n        title: post.title,\n        content: post.content,\n        comments: post.comments,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, localDisplay));\n}\n\nexport default ShowPost;","map":{"version":3,"sources":["/Users/Ethan/Documents/GitHub/Team-Reactor/src/ShowPost/ShowPost.js"],"names":["React","useContext","useState","useEffect","FirebaseContext","AuthContext","Link","useHistory","Formik","Form","Field","Card","PostCard","ShowPost","firebase","user","setUser","posts","setPosts","loading","setLoading","auth","onAuthStateChanged","postsBuilder","db","collection","get","then","querySnapshot","forEach","post","postHolder","data","id","concat","catch","error","alert","localDisplay","map","index","title","content","comments"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,QAAT,GAAoB;AAChB,QAAMC,QAAQ,GAAGb,UAAU,CAACG,eAAD,CAA3B;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,EAAhC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,IAAD,CAAtC;AAEAY,EAAAA,QAAQ,CAACO,IAAT,CAAcC,kBAAd,CAAiCP,IAAI,IAAI;AACrC,QAAIA,IAAJ,EAAU;AACNC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAFD,MAEO;AACHC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,GAND;AAQAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,IAAJ,EAAU;AACN,UAAIE,KAAJ;AACA,UAAIM,YAAY,GAAG,EAAnB;AACAT,MAAAA,QAAQ,CAACU,EAAT,CAAYC,UAAZ,CAAuB,MAAvB,EAA+BC,GAA/B,GAAqCC,IAArC,CAA0C,UAAUC,aAAV,EAAyB;AAC/DA,QAAAA,aAAa,CAACC,OAAd,CAAsBC,IAAI,IAAI;AAC1B,cAAIC,UAAU,GAAGD,IAAI,CAACE,IAAL,EAAjB;AACAF,UAAAA,IAAI,CAACG,EAAL,GAAUH,IAAI,CACdZ,QADU,CACDK,YAAY,CAACW,MAAb,CAAoBJ,IAAI,CAACE,IAAL,EAApB,CADC,CAAV;AAEH,SAJD;AAKH,OAND,EAMGL,IANH,CAMQ,YAAY;AAChBP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OARD,EAQGe,KARH,CAQS,UAAUC,KAAV,EAAiB;AACtBC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACH,OAVD;AAYH;AACJ,GAjBQ,EAiBN,CAACrB,IAAD,CAjBM,CAAT;AAmBA,MAAIuB,YAAY,GAAG,YAAnB;;AAEA,MAAI,CAACnB,OAAL,EAAc;AACVmB,IAAAA,YAAY,GAAGrB,KAAK,CAACsB,GAAN,CAAU,CAACT,IAAD,EAAOU,KAAP,KAAiB;AACtC,0BACI,oBAAC,QAAD;AACI,QAAA,IAAI,EAAEV,IAAI,CAACf,IADf;AAEI,QAAA,KAAK,EAAEe,IAAI,CAACW,KAFhB;AAGI,QAAA,OAAO,EAAEX,IAAI,CAACY,OAHlB;AAII,QAAA,QAAQ,EAAEZ,IAAI,CAACa,QAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQH,KATc,CAAf;AAUH;;AAGD,sBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIL,YAAJ,CADJ,CADJ;AAKH;;AAED,eAAezB,QAAf","sourcesContent":["\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from '../Firebase'\nimport AuthContext from '../Firebase/AuthContext'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Formik, Form, Field } from 'formik'\nimport { Card } from 'react-bootstrap'\nimport PostCard from './PostCard'\n\nfunction ShowPost() {\n    const firebase = useContext(FirebaseContext)\n    const [user, setUser] = useState()\n    const [posts, setPosts] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    firebase.auth.onAuthStateChanged(user => {\n        if (user) {\n            setUser(user);\n        } else {\n            setUser(null)\n        }\n    });\n\n    useEffect(() => {\n        if (user) {\n            let posts\n            let postsBuilder = []\n            firebase.db.collection('post').get().then(function (querySnapshot) {\n                querySnapshot.forEach(post => {\n                    let postHolder = post.data()\n                    post.id = post.\n                    setPosts(postsBuilder.concat(post.data()))\n                })\n            }).then(function () {\n                setLoading(false)\n            }).catch(function (error) {\n                alert(error)\n            })\n            \n        }\n    }, [user])\n\n    let localDisplay = 'loading...'\n\n    if (!loading) {\n        localDisplay = posts.map((post, index) => {\n            return (\n                <PostCard\n                    user={post.user}\n                    title={post.title}\n                    content={post.content}\n                    comments={post.comments}\n                />\n            )\n        })\n    }\n\n\n    return (\n        <>\n            <p>{localDisplay}</p>\n        </>\n    )\n}\n\nexport default ShowPost\n"]},"metadata":{},"sourceType":"module"}