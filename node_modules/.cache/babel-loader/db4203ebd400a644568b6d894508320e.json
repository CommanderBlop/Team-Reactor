{"ast":null,"code":"var _jsxFileName = \"/Users/Ethan/Documents/GitHub/Team-Reactor/src/Genre.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from './Firebase';\nimport AuthContext from './Firebase/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { Card } from 'react-bootstrap';\n\nfunction Friends() {\n  const firebase = useContext(FirebaseContext);\n  const [user, setUser] = useState();\n  const [friends, setFriends] = useState([]);\n  const [loading, setLoading] = useState(true);\n  firebase.auth.onAuthStateChanged(user => {\n    if (user) {\n      setUser(user);\n    } else {\n      setUser(null);\n    }\n  });\n  useEffect(() => {\n    if (user) {\n      let friendList;\n      let friendsBuilder = [];\n      let count = 0;\n      firebase.db.collection('user').doc(user.uid).get().then(function (doc) {\n        friendList = doc.data().friends;\n      }).then(function () {\n        friendList.forEach((friend, index) => {\n          firebase.db.collection('user').doc(friend).get().then(function (doc) {\n            friendsBuilder.push(doc.data());\n            count++;\n\n            if (count === friendList.length) {\n              setLoading(false);\n            }\n          });\n        });\n        setFriends(friendsBuilder);\n      });\n    }\n  }, [user]); // let localDisplay = 'loading...'\n  // if (!loading) {\n  //     // console.log(friends)\n  //     localDisplay = friends.map((friend, index) => {\n  //         return (\n  //             <Card>\n  //                 <Card.Title>{friend.name}</Card.Title>\n  //                 <p>{friend.insta && friend.insta}</p>\n  //                 <p>{friend.snap && friend.snap}</p>\n  //             </Card>\n  //         )\n  //     })\n  // }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n    id: \"region\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: 'checkbox',\n    id: 'region1',\n    label: 'Region 1',\n    checked: filters.includes('region1'),\n    onChange: filters.includes('region1') ? () => {\n      setFilters(filters.filter(filter => filter !== 'region1'));\n    } : () => {\n      setFilters(filters.concat('region1'));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: 'checkbox',\n    id: 'region2',\n    label: 'Region 2',\n    checked: filters.includes('region2'),\n    onChange: filters.includes('region2') ? () => {\n      setFilters(filters.filter(filter => filter !== 'region2'));\n    } : () => {\n      setFilters(filters.concat('region2'));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: 'checkbox',\n    id: 'region3',\n    label: 'Region 3',\n    checked: filters.includes('region3'),\n    onChange: filters.includes('region3') ? () => {\n      setFilters(filters.filter(filter => filter !== 'region3'));\n    } : () => {\n      setFilters(filters.concat('region3'));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      try {\n        //wait until log in is complete\n        await firebase.auth.signInWithEmailAndPassword(values.username, values.password); // history.push('/')\n      } catch (error) {\n        alert(error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"login-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    as: \"checkbox\",\n    type: \"text\",\n    placeholder: \"username\",\n    name: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    as: \"input\",\n    type: \"password\",\n    placeholder: \"password\",\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, \"login\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, \"Not registered? \", /*#__PURE__*/React.createElement(Link, {\n    to: \"/register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 60\n    }\n  }, \"Create an account\")))));\n}\n\nexport default Friends;","map":{"version":3,"sources":["/Users/Ethan/Documents/GitHub/Team-Reactor/src/Genre.js"],"names":["React","useContext","useState","useEffect","FirebaseContext","AuthContext","Link","useHistory","Formik","Form","Field","Card","Friends","firebase","user","setUser","friends","setFriends","loading","setLoading","auth","onAuthStateChanged","friendList","friendsBuilder","count","db","collection","doc","uid","get","then","data","forEach","friend","index","push","length","filters","includes","setFilters","filter","concat","username","password","values","setSubmitting","signInWithEmailAndPassword","error","alert"],"mappings":"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","sourcesContent":["\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from './Firebase'\nimport AuthContext from './Firebase/AuthContext'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Formik, Form, Field } from 'formik'\nimport { Card } from 'react-bootstrap'\n\nfunction Friends() {\n    const firebase = useContext(FirebaseContext)\n    const [user, setUser] = useState()\n    const [friends, setFriends] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    firebase.auth.onAuthStateChanged(user => {\n        if (user) {\n            setUser(user);\n        } else {\n            setUser(null)\n        }\n    });\n\n    useEffect(() => {\n        if (user) {\n            let friendList\n            let friendsBuilder = []\n            let count = 0\n            firebase.db.collection('user').doc(user.uid).get().then(function (doc) {\n                friendList = doc.data().friends\n            }).then(function () {\n                friendList.forEach((friend, index) => {\n                    firebase.db.collection('user').doc(friend).get().then(function (doc) {\n                        friendsBuilder.push(doc.data())\n                        count++\n                        if (count === friendList.length) {\n                            setLoading(false)\n                        }\n                    })\n                })\n                setFriends(friendsBuilder)\n            })\n        }\n    }, [user])\n\n    // let localDisplay = 'loading...'\n\n    // if (!loading) {\n    //     // console.log(friends)\n    //     localDisplay = friends.map((friend, index) => {\n    //         return (\n    //             <Card>\n    //                 <Card.Title>{friend.name}</Card.Title>\n    //                 <p>{friend.insta && friend.insta}</p>\n    //                 <p>{friend.snap && friend.snap}</p>\n    //             </Card>\n    //         )\n    //     })\n    // }\n\n\n    return (\n        <>\n            <Form id=\"region\">\n                  <Form.Check\n                    type={'checkbox'}\n                    id={'region1'}\n                    label={'Region 1'}\n                    checked={filters.includes('region1')}\n                    onChange={filters.includes('region1') ? () => {\n                      setFilters(filters.filter(filter => filter !== 'region1'))\n                    } : () => {\n                      setFilters(filters.concat('region1'))\n                    }}\n                  />\n                  <Form.Check\n                    type={'checkbox'}\n                    id={'region2'}\n                    label={'Region 2'}\n                    checked={filters.includes('region2')}\n                    onChange={filters.includes('region2') ? () => {\n                      setFilters(filters.filter(filter => filter !== 'region2'))\n                    } : () => {\n                      setFilters(filters.concat('region2'))\n                    }}\n                  />\n                  <Form.Check\n                    type={'checkbox'}\n                    id={'region3'}\n                    label={'Region 3'}\n                    checked={filters.includes('region3')}\n                    onChange={filters.includes('region3') ? () => {\n                      setFilters(filters.filter(filter => filter !== 'region3'))\n                    } : () => {\n                      setFilters(filters.concat('region3'))\n                    }}\n                  />\n                </Form>\n\n            <Formik\n                initialValues={{ username: '', password: '' }}\n                onSubmit={async (values, { setSubmitting }) => {\n                    try {\n                        //wait until log in is complete\n                        await firebase.auth.signInWithEmailAndPassword(values.username, values.password)\n                        // history.push('/')\n                    } catch (error) {\n                        alert(error)\n                    }\n                }}\n            >\n                <Form className=\"login-form\">\n                    <Field as=\"checkbox\" type=\"text\" placeholder=\"username\" name=\"username\" />\n                    <Field as=\"input\" type=\"password\" placeholder=\"password\" name=\"password\" />\n                    <button type=\"submit\">login</button>\n                    <p className=\"message\">Not registered? <Link to=\"/register\">Create an account</Link></p>\n                </Form>\n            </Formik>\n        </>\n    )\n}\n\nexport default Friends"]},"metadata":{},"sourceType":"module"}