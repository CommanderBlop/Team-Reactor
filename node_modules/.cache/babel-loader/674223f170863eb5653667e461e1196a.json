{"ast":null,"code":"var _jsxFileName = \"/Users/commanderblop/Documents/GitHub/Team-Reactor/src/MovieCollection/MovieCollection.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport FirebaseContext from '../Firebase';\nimport { useHistory, Link } from 'react-router-dom';\nimport MovieFinder from './AddMovie';\nconst API_KEY = \"7d667341\";\n\nfunction MovieCollection() {\n  //const userGenreList = ['romantic', 'adventure', 'sci-fi', 'suspense', 'anime']\n  const firebase = useContext(FirebaseContext);\n  const mList = firebase.db.collection(\"movieTester\").doc(\"testUser\");\n  const [userMovieList, setUserMovieList] = useState(['']); // const history = useHistory()\n  //get user movie collection and put it he re\\\n\n  useEffect(() => {\n    function doGet() {\n      mList.get().then(function (doc) {\n        if (doc.exists) {\n          setUserMovieList(doc.data().movieID);\n          console.log(\"Document data:\", doc.data());\n        } else {\n          // doc.data() will be undefined in this case\n          console.log(\"No such document!\");\n          setUserMovieList(['']);\n        }\n\n        setTriggerNext(1);\n      }).catch(function (error) {\n        console.log(\"Error getting document:\", error);\n      });\n    }\n\n    doGet(), [];\n  }); //const [userMovieList, setUserMovieList] = firetbase.db.collection(\"movieTester\").doc(\"testUser\")\n\n  const [counter, setCounter] = useState(0);\n  const [omdbData, setOmdbData] = useState('Loading...');\n  const [triggerNext, setTriggerNext] = useState(0); //let textToBeDisplayed = userGenreList[Math.round(Math.random() * userGenreList.length)]\n\n  let url = \"http://www.omdbapi.com/?i=\" + userMovieList[counter].toString() + \"&apikey=\" + API_KEY; //console.log(url)\n  //fetch data\n\n  useEffect(() => {\n    function doFetch() {\n      fetch(url).then(response => response.json()).then(data => {\n        setOmdbData(data);\n      });\n    }\n\n    doFetch();\n  }, [triggerNext]);\n  let title;\n  let genre;\n  let director;\n  let plot; //extract needed info\n\n  if (userMovieList != ['']) {\n    title = omdbData === 'Loading...' ? omdbData : omdbData.Title;\n    genre = omdbData === 'Loading...' || omdbData.Genre === undefined ? '' : \"Genre: \" + omdbData.Genre;\n    director = omdbData === 'Loading...' || omdbData.Director === undefined ? '' : \"Director: \" + omdbData.Director;\n    plot = omdbData === 'Loading...' || omdbData.Plot === undefined ? '' : omdbData.Plot;\n  } else {\n    title = \"Your collection is empty\";\n    genre = '';\n    director = '';\n    plot = '';\n  } //button right/left click handler\n\n\n  function buttonClick(counterChange) {\n    if (counterChange > 0 && counter + counterChange >= userMovieList.length) {\n      setCounter(0);\n      setTriggerNext(triggerNext + 1);\n      setOmdbData('Loading...');\n      return;\n    }\n\n    if (counterChange < 0 && counter + counterChange < 0) {\n      setCounter(userMovieList.length - 1);\n      setTriggerNext(triggerNext + 1);\n      setOmdbData('Loading...');\n      return;\n    }\n\n    setCounter(counter + counterChange);\n    setTriggerNext(triggerNext + 1);\n    setOmdbData('Loading...');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => buttonClick(-1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, '<'), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => buttonClick(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, '>'), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"AddMovie\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Find Movie\")), /*#__PURE__*/React.createElement(MovieFinder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, title), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, genre), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, director), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, plot)));\n}\n\nexport default MovieCollection;","map":{"version":3,"sources":["/Users/commanderblop/Documents/GitHub/Team-Reactor/src/MovieCollection/MovieCollection.js"],"names":["React","useState","useEffect","useContext","FirebaseContext","useHistory","Link","MovieFinder","API_KEY","MovieCollection","firebase","mList","db","collection","doc","userMovieList","setUserMovieList","doGet","get","then","exists","data","movieID","console","log","setTriggerNext","catch","error","counter","setCounter","omdbData","setOmdbData","triggerNext","url","toString","doFetch","fetch","response","json","title","genre","director","plot","Title","Genre","undefined","Director","Plot","buttonClick","counterChange","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport FirebaseContext from '../Firebase'\nimport {useHistory, Link} from 'react-router-dom'\nimport MovieFinder from './AddMovie'\n\nconst API_KEY = \"7d667341\"\n\nfunction MovieCollection() {\n    //const userGenreList = ['romantic', 'adventure', 'sci-fi', 'suspense', 'anime']\n    const firebase = useContext(FirebaseContext)\n    const mList = firebase.db.collection(\"movieTester\").doc(\"testUser\")\n    const [userMovieList, setUserMovieList] = useState([''])\n    // const history = useHistory()\n    //get user movie collection and put it he re\\\n    useEffect(() => {\n        function doGet() {\n        mList.get().then(function(doc) {\n            if (doc.exists) {\n                setUserMovieList(doc.data().movieID)\n                console.log(\"Document data:\", doc.data())\n            } else {\n                // doc.data() will be undefined in this case\n                console.log(\"No such document!\");\n                setUserMovieList(['']);\n            }\n            setTriggerNext(1)\n        }).catch(function(error) {\n            console.log(\"Error getting document:\", error);\n        })} doGet(), []\n    }\n        \n    )\n    \n    //const [userMovieList, setUserMovieList] = firetbase.db.collection(\"movieTester\").doc(\"testUser\")\n    const [counter, setCounter] = useState(0)\n    const [omdbData, setOmdbData] = useState('Loading...')\n\n    const [triggerNext, setTriggerNext] = useState(0)\n    //let textToBeDisplayed = userGenreList[Math.round(Math.random() * userGenreList.length)]\n    let url = \"http://www.omdbapi.com/?i=\" + userMovieList[counter].toString() + \"&apikey=\" + API_KEY\n    //console.log(url)\n\n    //fetch data\n    useEffect(() => {\n        function doFetch() {\n            fetch(url)\n            .then(response => \n                response.json())\n            \n            .then(data => {\n                setOmdbData(data)\n            })\n        }\n        doFetch()\n    }, [triggerNext])\n\n    let title\n    let genre\n    let director\n    let plot\n    \n    //extract needed info\n    if(userMovieList != ['']) {\n         title = omdbData === 'Loading...' ? omdbData : omdbData.Title\n         genre = omdbData === 'Loading...' || omdbData.Genre === undefined? '' : \"Genre: \" + omdbData.Genre\n         director = omdbData === 'Loading...' || omdbData.Director === undefined? '' : \"Director: \" + omdbData.Director\n         plot = omdbData === 'Loading...' || omdbData.Plot === undefined ? '' : omdbData.Plot\n    } else {\n         title = \"Your collection is empty\"\n         genre = ''\n         director = ''\n         plot = ''\n    }\n    \n\n    //button right/left click handler\n    function buttonClick(counterChange) {\n        if(counterChange > 0 && counter + counterChange >= userMovieList.length) {\n            setCounter(0);\n            setTriggerNext(triggerNext+1)\n            setOmdbData('Loading...')\n            return \n        }\n        if(counterChange < 0 && counter + counterChange < 0) {\n            setCounter(userMovieList.length - 1)\n            setTriggerNext(triggerNext+1)\n            setOmdbData('Loading...')\n            return \n        }\n        setCounter(counter + counterChange)\n        setTriggerNext(triggerNext+1)\n        setOmdbData('Loading...')\n    }\n    \n    return (\n        <div>\n            <button><Link to = '/'>Back</Link></button>\n            <button onClick = {() =>buttonClick(-1)}>{'<'}</button>\n            <button onClick = {() => buttonClick(1)}>{'>'}</button>\n            <button><Link to = 'AddMovie'>Find Movie</Link></button>\n            <MovieFinder />\n            <div>\n                <h1>{title}</h1>\n                <h3>{genre}</h3>\n                <h3>{director}</h3>\n                <p>{plot}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieCollection"]},"metadata":{},"sourceType":"module"}