{"ast":null,"code":"var _jsxFileName = \"/Users/Ethan/Documents/GitHub/Team-Reactor/src/Genre.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from './Firebase';\nimport AuthContext from './Firebase/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Formik, Field } from 'formik';\nimport { Card, Form } from 'react-bootstrap';\n\nfunction Genre() {\n  const firebase = useContext(FirebaseContext);\n  const [user, setUser] = useState();\n  const [genres, setGenres] = useState([]);\n  const [loading, setLoading] = useState(true);\n  firebase.auth.onAuthStateChanged(user => {\n    if (user) {\n      setUser(user);\n    } else {\n      setUser(null);\n    }\n  });\n\n  const handleNext = () => {};\n\n  let genreList = ['Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film Noir', 'Game Show', 'History', 'Horror', 'Musical', 'Music', 'Mystery', 'News', 'Reality TV', 'Romance', 'Sci Fi', 'Short', 'Sport', 'Talk Show', 'Thriller', 'War', 'Western'];\n  let checkingField = genreList.map(genre => {\n    return /*#__PURE__*/React.createElement(Form.Check, {\n      type: 'checkbox',\n      id: genre,\n      label: genre,\n      checked: genres.includes(genre),\n      onChange: genres.includes(genre) ? () => {\n        setGenres(genres.filter(filter => filter !== genre));\n      } : () => {\n        setGenres(genres.concat(genre));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Choose the genres you like: \"), /*#__PURE__*/React.createElement(Form, {\n    id: \"genre\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, checkingField, /*#__PURE__*/React.createElement(Button, {\n    variant: \"light\",\n    onClick: () => setGenres([]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"Next\")));\n}\n\nexport default Genre;","map":{"version":3,"sources":["/Users/Ethan/Documents/GitHub/Team-Reactor/src/Genre.js"],"names":["React","useContext","useState","useEffect","FirebaseContext","AuthContext","Link","useHistory","Formik","Field","Card","Form","Genre","firebase","user","setUser","genres","setGenres","loading","setLoading","auth","onAuthStateChanged","handleNext","genreList","checkingField","map","genre","includes","filter","concat"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,QAA9B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;;AAEA,SAASC,KAAT,GAAiB;AACb,QAAMC,QAAQ,GAAGZ,UAAU,CAACG,eAAD,CAA3B;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,IAAD,CAAtC;AAEAW,EAAAA,QAAQ,CAACO,IAAT,CAAcC,kBAAd,CAAiCP,IAAI,IAAI;AACrC,QAAIA,IAAJ,EAAU;AACNC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAFD,MAEO;AACHC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,GAND;;AAQA,QAAMO,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,MAAIC,SAAS,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,EAAiC,WAAjC,EAA8C,WAA9C,EAA2D,QAA3D,EAAqE,OAArE,EAA8E,aAA9E,EAA6F,OAA7F,EAAsG,QAAtG,EAAgH,SAAhH,EAA2H,WAA3H,EAAwI,WAAxI,EAAqJ,SAArJ,EAAgK,QAAhK,EAA0K,SAA1K,EAAqL,OAArL,EAA8L,SAA9L,EAAyM,MAAzM,EAAiN,YAAjN,EAA+N,SAA/N,EAA0O,QAA1O,EAAoP,OAApP,EAA6P,OAA7P,EAAsQ,WAAtQ,EAAmR,UAAnR,EAA+R,KAA/R,EAAsS,SAAtS,CAAhB;AACA,MAAIC,aAAa,GAAGD,SAAS,CAACE,GAAV,CAAcC,KAAK,IAAI;AACvC,wBACI,oBAAC,IAAD,CAAM,KAAN;AACI,MAAA,IAAI,EAAE,UADV;AAEI,MAAA,EAAE,EAAEA,KAFR;AAGI,MAAA,KAAK,EAAEA,KAHX;AAII,MAAA,OAAO,EAAEV,MAAM,CAACW,QAAP,CAAgBD,KAAhB,CAJb;AAKI,MAAA,QAAQ,EAAEV,MAAM,CAACW,QAAP,CAAgBD,KAAhB,IAAyB,MAAM;AACrCT,QAAAA,SAAS,CAACD,MAAM,CAACY,MAAP,CAAcA,MAAM,IAAIA,MAAM,KAAKF,KAAnC,CAAD,CAAT;AACH,OAFS,GAEN,MAAM;AACNT,QAAAA,SAAS,CAACD,MAAM,CAACa,MAAP,CAAcH,KAAd,CAAD,CAAT;AACH,OATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAaH,GAdmB,CAApB;AAiBA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,aADL,eAaI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,OAAhB;AAAwB,IAAA,OAAO,EAAE,MAAMP,SAAS,CAAC,EAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAbJ,eAcI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEK,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ,CAFJ,CADJ;AAsBH;;AAED,eAAeV,KAAf","sourcesContent":["\nimport React, { useContext, useState, useEffect } from \"react\";\nimport FirebaseContext from './Firebase'\nimport AuthContext from './Firebase/AuthContext'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Formik, Field } from 'formik'\nimport { Card, Form } from 'react-bootstrap'\n\nfunction Genre() {\n    const firebase = useContext(FirebaseContext)\n    const [user, setUser] = useState()\n    const [genres, setGenres] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    firebase.auth.onAuthStateChanged(user => {\n        if (user) {\n            setUser(user);\n        } else {\n            setUser(null)\n        }\n    });\n\n    const handleNext = () => {\n\n    }\n\n    let genreList = ['Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film Noir', 'Game Show', 'History', 'Horror', 'Musical', 'Music', 'Mystery', 'News', 'Reality TV', 'Romance', 'Sci Fi', 'Short', 'Sport', 'Talk Show', 'Thriller', 'War', 'Western']\n    let checkingField = genreList.map(genre => {\n        return (\n            <Form.Check\n                type={'checkbox'}\n                id={genre}\n                label={genre}\n                checked={genres.includes(genre)}\n                onChange={genres.includes(genre) ? () => {\n                    setGenres(genres.filter(filter => filter !== genre))\n                } : () => {\n                    setGenres(genres.concat(genre))\n                }}\n            />\n        )\n    })\n\n\n    return (\n        <div>\n            <h3>Choose the genres you like: </h3>\n            <Form id=\"genre\">\n                {checkingField}\n                {/* <Form.Check\n                    type={'checkbox'}\n                    id={'act ion'}\n                    label={'Action'}\n                    checked={genres.includes('action')}\n                    onChange={genres.includes('action') ? () => {\n                        setGenres(genres.filter(filter => filter !== 'action'))\n                    } : () => {\n                        setGenres(genres.concat('action'))\n                    }}\n                /> */}\n                <Button variant=\"light\" onClick={() => setGenres([])}>Clear</Button>\n                <Button onClick={handleNext}>Next</Button>\n            </Form>\n\n        </div>\n    )\n}\n\nexport default Genre"]},"metadata":{},"sourceType":"module"}