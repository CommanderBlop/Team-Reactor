{"ast":null,"code":"var _jsxFileName = \"/Users/commanderblop/Documents/GitHub/Team-Reactor/src/MovieCollection.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport FirebaseContext from './Firebase';\n\nfunction MovieCollection() {\n  //const userGenreList = ['romantic', 'adventure', 'sci-fi', 'suspense', 'anime']\n  const firebase = useContext(FirebaseContext);\n  const API_KEY = \"7d667341\";\n  const mList = firebase.db.collection(\"movieTester\").doc(\"testUser\");\n  const [userMovieList, setUserMovieList] = useState(); //get user movie collection and put it here\\\n\n  useEffect(() => mList.get().then(function (doc) {\n    if (doc.exists) {\n      setUserMovieList = doc;\n      console.log(\"Document data:\", doc.data());\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n      setUserMovieList = [];\n    }\n  }).catch(function (error) {\n    console.log(\"Error getting document:\", error);\n  })); //const [userMovieList, setUserMovieList] = firetbase.db.collection(\"movieTester\").doc(\"testUser\")\n\n  const [counter, setCounter] = useState(0);\n  const [omdbData, setOmdbData] = useState('Loading');\n  const [triggerNext, setTriggerNext] = useState(0); //let textToBeDisplayed = userGenreList[Math.round(Math.random() * userGenreList.length)]\n\n  let url = \"http://www.omdbapi.com/?i=\" + userMovieList[counter].toString() + \"&apikey=\" + API_KEY; //fetch data\n\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(data => {\n      setOmdbData(data);\n    });\n  }, [triggerNext]);\n  let title;\n  let genre;\n  let director;\n  let plot; //extract needed info\n\n  if (userMovieList === []) {\n    let title = omdbData === 'Loading' ? omdbData : omdbData.Title;\n    let genre = omdbData === 'Loading' ? '' : \"Genre: \" + omdbData.Genre;\n    let director = omdbData === 'Loading' ? '' : \"Director: \" + omdbData.Director;\n    let plot = omdbData === 'Loading' ? '' : omdbData.Plot;\n  } else {\n    let title = \"Your collection is empty\";\n    let genre = '';\n    let director = '';\n    let plot = '';\n  } //button right/left click handler\n\n\n  function buttonClick(counterChange) {\n    if (counterChange > 0 && counter + counterChange >= userMovieList.length) {\n      setCounter(0);\n      setTriggerNext(triggerNext + 1);\n      setOmdbData('Loading');\n      return;\n    }\n\n    if (counterChange < 0 && counter + counterChange < 0) {\n      setCounter(userMovieList.length - 1);\n      setTriggerNext(triggerNext + 1);\n      setOmdbData('Loading');\n      return;\n    }\n\n    setCounter(counter + counterChange);\n    setTriggerNext(triggerNext + 1);\n    setOmdbData('Loading');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => buttonClick(-1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, '<'), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => buttonClick(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, '>'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, title), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, genre), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, director), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, plot)));\n}\n\nexport default MovieCollection;","map":{"version":3,"sources":["/Users/commanderblop/Documents/GitHub/Team-Reactor/src/MovieCollection.js"],"names":["React","useState","useEffect","useContext","FirebaseContext","MovieCollection","firebase","API_KEY","mList","db","collection","doc","userMovieList","setUserMovieList","get","then","exists","console","log","data","catch","error","counter","setCounter","omdbData","setOmdbData","triggerNext","setTriggerNext","url","toString","fetch","response","json","title","genre","director","plot","Title","Genre","Director","Plot","buttonClick","counterChange","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport FirebaseContext from './Firebase'\n\n\nfunction MovieCollection() {\n    //const userGenreList = ['romantic', 'adventure', 'sci-fi', 'suspense', 'anime']\n    const firebase = useContext(FirebaseContext)\n    const API_KEY = \"7d667341\"\n    const mList = firebase.db.collection(\"movieTester\").doc(\"testUser\")\n    const [userMovieList, setUserMovieList] = useState()\n    //get user movie collection and put it here\\\n    useEffect(() => \n        mList.get().then(function(doc) {\n            if (doc.exists) {\n                setUserMovieList = doc\n                console.log(\"Document data:\", doc.data());\n            } else {\n                // doc.data() will be undefined in this case\n                console.log(\"No such document!\");\n                setUserMovieList = [];\n            }\n        }).catch(function(error) {\n            console.log(\"Error getting document:\", error);\n        })\n    )\n    \n    //const [userMovieList, setUserMovieList] = firetbase.db.collection(\"movieTester\").doc(\"testUser\")\n    const [counter, setCounter] = useState(0)\n    const [omdbData, setOmdbData] = useState('Loading')\n    const [triggerNext, setTriggerNext] = useState(0)\n    //let textToBeDisplayed = userGenreList[Math.round(Math.random() * userGenreList.length)]\n    let url = \"http://www.omdbapi.com/?i=\" + userMovieList[counter].toString() + \"&apikey=\" + API_KEY\n\n    //fetch data\n    useEffect(() => {\n        fetch(url)\n            .then(response => \n                response.json())\n            \n            .then(data => {\n                setOmdbData(data)\n            })\n    }, [triggerNext])\n\n    let title\n    let genre\n    let director\n    let plot\n    \n    //extract needed info\n    if(userMovieList === []) {\n        let title = omdbData === 'Loading' ? omdbData : omdbData.Title\n        let genre = omdbData === 'Loading'? '' : \"Genre: \" + omdbData.Genre\n        let director = omdbData === 'Loading'? '' : \"Director: \" + omdbData.Director\n        let plot = omdbData === 'Loading' ? '' : omdbData.Plot\n    } else {\n        let title = \"Your collection is empty\"\n        let genre = ''\n        let director = ''\n        let plot = ''\n    }\n    \n\n    //button right/left click handler\n    function buttonClick(counterChange) {\n        if(counterChange > 0 && counter + counterChange >= userMovieList.length) {\n            setCounter(0);\n            setTriggerNext(triggerNext+1)\n            setOmdbData('Loading')\n            return \n        }\n        if(counterChange < 0 && counter + counterChange < 0) {\n            setCounter(userMovieList.length - 1)\n            setTriggerNext(triggerNext+1)\n            setOmdbData('Loading')\n            return \n        }\n        setCounter(counter + counterChange)\n        setTriggerNext(triggerNext+1)\n        setOmdbData('Loading')\n    }\n    \n    return (\n        <div>\n            <button>Back</button>\n            <button onClick = {() =>buttonClick(-1)}>{'<'}</button>\n            <button onClick = {() => buttonClick(1)}>{'>'}</button>\n            <div>\n                <h1>{title}</h1>\n                <h3>{genre}</h3>\n                <h3>{director}</h3>\n                <p>{plot}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieCollection"]},"metadata":{},"sourceType":"module"}