{"ast":null,"code":"var _jsxFileName = \"/Users/commanderblop/Documents/GitHub/Team-Reactor/src/MovieCollection.js\";\nimport React, { useState, useEffect } from 'react';\n\nfunction MovieRec() {\n  //userGenreList = props.userGenreList\n  const userGenreList = ['romantic', 'adventure', 'sci-fi', 'suspense', 'anime'];\n  const userMovieList = ['tt4566758/'];\n  let counter = 0;\n  const [finished, setFinished] = useState(false);\n  const [omdbData, setOmdbData] = useState(false);\n  let textToBeDisplayed = userGenreList[Math.round(Math.random() * userGenreList.length)];\n  let url = \"http://www.omdbapi.com/?apikey=[906b7c64]&i=\" + userMovieList[counter].toString();\n  useEffect(() => {\n    fetch(\"http://www.omdbapi.com/?i=tt3896198&apikey=906b7c64\").then(response => response.json()).then(data => {\n      setOmdbData = data;\n      setFinished = true;\n      console.log(omdbData);\n    });\n  }, []);\n  let title = finished ? omdbData.Title : 'Loading...';\n  let genre = finished ? \"Genre\" + omdbData.Genre : '';\n  let director = finished ? \"Director\" + omdbData.Director : '';\n  let plot = finished ? \"Plot: \" + omdbData.Plot : '';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Left\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Right\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, title), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, genre), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, director), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, plot)));\n}\n\nexport default MovieRec;","map":{"version":3,"sources":["/Users/commanderblop/Documents/GitHub/Team-Reactor/src/MovieCollection.js"],"names":["React","useState","useEffect","MovieRec","userGenreList","userMovieList","counter","finished","setFinished","omdbData","setOmdbData","textToBeDisplayed","Math","round","random","length","url","toString","fetch","then","response","json","data","console","log","title","Title","genre","Genre","director","Director","plot","Plot"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAGA,SAASC,QAAT,GAAoB;AAChB;AACA,QAAMC,aAAa,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,EAAoC,UAApC,EAAgD,OAAhD,CAAtB;AACA,QAAMC,aAAa,GAAG,CAAC,YAAD,CAAtB;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AAEA,MAAIU,iBAAiB,GAAGP,aAAa,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,aAAa,CAACW,MAAzC,CAAD,CAArC;AACA,MAAIC,GAAG,GAAG,iDAAiDX,aAAa,CAACC,OAAD,CAAb,CAAuBW,QAAvB,EAA3D;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,KAAK,CAAC,qDAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IACVA,QAAQ,CAACC,IAAT,EAFR,EAIKF,IAJL,CAIUG,IAAI,IAAI;AACVZ,MAAAA,WAAW,GAAGY,IAAd;AACAd,MAAAA,WAAW,GAAG,IAAd;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ;AACH,KARL;AASH,GAVQ,EAUN,EAVM,CAAT;AAaA,MAAIgB,KAAK,GAAGlB,QAAQ,GAAGE,QAAQ,CAACiB,KAAZ,GAAoB,YAAxC;AACA,MAAIC,KAAK,GAAGpB,QAAQ,GAAG,UAAUE,QAAQ,CAACmB,KAAtB,GAA8B,EAAlD;AACA,MAAIC,QAAQ,GAAGtB,QAAQ,GAAG,aAAaE,QAAQ,CAACqB,QAAzB,GAAoC,EAA3D;AACA,MAAIC,IAAI,GAAGxB,QAAQ,GAAG,WAAWE,QAAQ,CAACuB,IAAvB,GAA8B,EAAjD;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,KAAL,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAL,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,QAAL,CAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,IAAJ,CAJJ,CALJ,CADJ;AAgBH;;AAED,eAAe5B,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\n\n\nfunction MovieRec() {\n    //userGenreList = props.userGenreList\n    const userGenreList = ['romantic', 'adventure', 'sci-fi', 'suspense', 'anime']\n    const userMovieList = ['tt4566758/']\n    let counter = 0\n    const [finished, setFinished] = useState(false)\n    const [omdbData, setOmdbData] = useState(false)\n\n    let textToBeDisplayed = userGenreList[Math.round(Math.random() * userGenreList.length)]\n    let url = \"http://www.omdbapi.com/?apikey=[906b7c64]&i=\" + userMovieList[counter].toString()\n    useEffect(() => {\n        fetch(\"http://www.omdbapi.com/?i=tt3896198&apikey=906b7c64\")\n            .then(response => \n                response.json())\n            \n            .then(data => {\n                setOmdbData = data\n                setFinished = true\n                console.log(omdbData)\n            })\n    }, [])\n    \n            \n    let title = finished ? omdbData.Title : 'Loading...'\n    let genre = finished ? \"Genre\" + omdbData.Genre : ''\n    let director = finished ? \"Director\" + omdbData.Director : ''\n    let plot = finished ? \"Plot: \" + omdbData.Plot : ''\n    \n    return (\n        <div>\n            <button>Back</button>\n            <button>Left</button>\n            <button>Right</button>\n            {/* <h1>{textToBeDisplayed}</h1> */}\n            <div>\n                <h1>{title}</h1>\n                <h3>{genre}</h3>\n                <h3>{director}</h3>\n                <p>{plot}</p>\n            </div>\n            \n        </div>\n    )\n\n}\n\nexport default MovieRec"]},"metadata":{},"sourceType":"module"}